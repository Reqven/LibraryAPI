<!doctype html>
<html>
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Library API - Documentation</title>
    <style type="text/css">
      body {
        font-family: Trebuchet MS, sans-serif;
        font-size: 15px;
        color: #444;
        margin-right: 24px;
      }

      h1	{
        font-size: 25px;
      }
      h2	{
        font-size: 20px;
      }
      h3	{
        font-size: 16px;
        font-weight: bold;
      }
      hr	{
        height: 1px;
        border: 0;
        color: #ddd;
        background-color: #ddd;
      }

      .app-desc {
        clear: both;
        margin-left: 20px;
      }
      .param-name {
        width: 100%;
      }
      .license-info {
        margin-left: 20px;
      }

      .license-url {
        margin-left: 20px;
      }

      .model {
        margin: 0 0 0px 20px;
      }

      .method {
        margin-left: 20px;
      }

      .method-notes	{
        margin: 10px 0 20px 0;
        font-size: 90%;
        color: #555;
      }

      pre {
        padding: 10px;
        margin-bottom: 2px;
      }

      .http-method {
      text-transform: uppercase;
      }

      pre.get {
        background-color: #0f6ab4;
      }

      pre.post {
        background-color: #10a54a;
      }

      pre.put {
        background-color: #c5862b;
      }

      pre.delete {
        background-color: #a41e22;
      }

      .huge	{
        color: #fff;
      }

      pre.example {
        background-color: #f3f3f3;
        padding: 10px;
        border: 1px solid #ddd;
      }

      code {
        white-space: pre;
      }

      .nickname {
        font-weight: bold;
      }

      .method-path {
        font-size: 1.5em;
        background-color: #0f6ab4;
      }

      .up {
        float:right;
      }

      .parameter {
        width: 500px;
      }

      .param {
        width: 500px;
        padding: 10px 0 0 20px;
        font-weight: bold;
      }

      .param-desc {
        width: 700px;
        padding: 0 0 0 20px;
        color: #777;
      }

      .param-type {
        font-style: italic;
      }

      .param-enum-header {
      width: 700px;
      padding: 0 0 0 60px;
      color: #777;
      font-weight: bold;
      }

      .param-enum {
      width: 700px;
      padding: 0 0 0 80px;
      color: #777;
      font-style: italic;
      }

      .field-label {
        padding: 0;
        margin: 0;
        clear: both;
      }

      .field-items	{
        padding: 0 0 15px 0;
        margin-bottom: 15px;
      }

      .return-type {
        clear: both;
        padding-bottom: 10px;
      }

      .param-header {
        font-weight: bold;
      }

      .method-tags {
        text-align: right;
      }

      .method-tag {
        background: none repeat scroll 0% 0% #24A600;
        border-radius: 3px;
        padding: 2px 10px;
        margin: 2px;
        color: #FFF;
        display: inline-block;
        text-decoration: none;
      }
    </style>
  </head>
  <body>
  <h1>Library API</h1>
    <div class="app-desc">This is the Library API for the NodeJS project. The app is hosted on Heroku using a SQLite database to store data. This API provides a fully-fonctionnal CRUD for a Library to manage books. As you can only read what are the books in the database from your browser, you may need a software to send the DELETE, POST or PUT queries.</div>
    <div class="app-desc">Version: 1.0.0</div>
    <div class="app-desc">BasePath:/</div>

  <h1>Documentation</h1>
  <h2><a name="__Methods">Methods</a></h2>
  [ Jump to <a href="#__Models">Models</a> ]

  <h3>Table of Contents </h3>
  <div class="method-summary"></div>
  <h4><a href="#Books">Books</a></h4>
  <ul>
  <li><a href="#booksAddPost"><code><span class="http-method">post</span> /books/add</code></a></li>
  <li><a href="#booksDeleteDelete"><code><span class="http-method">delete</span> /books/delete</code></a></li>
  <li><a href="#booksGet"><code><span class="http-method">get</span> /books</code></a></li>
  <li><a href="#booksUpdatePut"><code><span class="http-method">put</span> /books/update</code></a></li>
  </ul>

  <h1><a name="Books">Books</a></h1>
  <div class="method"><a name="booksAddPost"/>
    <div class="method-path">
    <a class="up" href="#__Methods">Up</a>
    <pre class="post"><code class="huge"><span class="http-method">post</span> /books/add</code></pre></div>
    <div class="method-summary">Add a new book (<span class="nickname">booksAddPost</span>)</div>
    <div class="method-notes"></div>





    <h3 class="field-label">Query parameters</h3>
    <div class="field-items">
      <div class="param">id (optional)</div>

      <div class="param-desc"><span class="param-type">Query Parameter</span> &mdash;  </div><div class="param">name (required)</div>

      <div class="param-desc"><span class="param-type">Query Parameter</span> &mdash;  </div><div class="param">author (required)</div>

      <div class="param-desc"><span class="param-type">Query Parameter</span> &mdash;  </div><div class="param">release (optional)</div>

      <div class="param-desc"><span class="param-type">Query Parameter</span> &mdash;  </div><div class="param">available (optional)</div>

      <div class="param-desc"><span class="param-type">Query Parameter</span> &mdash;  </div>
    </div>  <!-- field-items -->


    <h3 class="field-label">Return type</h3>
    <div class="return-type">
      array[<a href="#Books">Books</a>]
      
    </div>

    <!--Todo: process Response Object and its headers, schema, examples -->

    <h3 class="field-label">Example data</h3>
    <div class="example-data-content-type">Content-Type: application/json</div>
    <pre class="example"><code>[ {
  "author" : "Stephen King",
  "release" : "2018-04-30T15:38:42.853Z",
  "name" : "Marche ou crève",
  "available" : true,
  "id" : 1
}, {
  "author" : "Stephen King",
  "release" : "2018-04-30T15:38:42.853Z",
  "name" : "Marche ou crève",
  "available" : true,
  "id" : 1
} ]</code></pre>

    <h3 class="field-label">Produces</h3>
    This API call produces the following media types according to the <span class="header">Accept</span> request header;
    the media type will be conveyed by the <span class="heaader">Content-Type</span> response header.
    <ul>
      <li><code>application/json</code></li>
    </ul>

    <h3 class="field-label">Responses</h3>
    <h4 class="field-label">201</h4>
    The book has been successfully created
        
    <h4 class="field-label">400</h4>
    Missing data
        <a href="#"></a>
    <h4 class="field-label">404</h4>
    Incorrect Books.attribute
        <a href="#"></a>
  </div> <!-- method -->
  <hr/>
  <div class="method"><a name="booksDeleteDelete"/>
    <div class="method-path">
    <a class="up" href="#__Methods">Up</a>
    <pre class="delete"><code class="huge"><span class="http-method">delete</span> /books/delete</code></pre></div>
    <div class="method-summary">Delete a book (<span class="nickname">booksDeleteDelete</span>)</div>
    <div class="method-notes"></div>





    <h3 class="field-label">Query parameters</h3>
    <div class="field-items">
      <div class="param">id (required)</div>

      <div class="param-desc"><span class="param-type">Query Parameter</span> &mdash;  </div>
    </div>  <!-- field-items -->



    <!--Todo: process Response Object and its headers, schema, examples -->


    <h3 class="field-label">Produces</h3>
    This API call produces the following media types according to the <span class="header">Accept</span> request header;
    the media type will be conveyed by the <span class="heaader">Content-Type</span> response header.
    <ul>
      <li><code>application/json</code></li>
    </ul>

    <h3 class="field-label">Responses</h3>
    <h4 class="field-label">200</h4>
    The book has been successfully deleted
        <a href="#"></a>
    <h4 class="field-label">400</h4>
    You must pass a book's id to delete it
        <a href="#"></a>
    <h4 class="field-label">404</h4>
    No book found for the provided id
        <a href="#"></a>
  </div> <!-- method -->
  <hr/>
  <div class="method"><a name="booksGet"/>
    <div class="method-path">
    <a class="up" href="#__Methods">Up</a>
    <pre class="get"><code class="huge"><span class="http-method">get</span> /books</code></pre></div>
    <div class="method-summary">Get all books (<span class="nickname">booksGet</span>)</div>
    <div class="method-notes"></div>





    <h3 class="field-label">Query parameters</h3>
    <div class="field-items">
      <div class="param">id (optional)</div>

      <div class="param-desc"><span class="param-type">Query Parameter</span> &mdash;  </div>
    </div>  <!-- field-items -->


    <h3 class="field-label">Return type</h3>
    <div class="return-type">
      array[<a href="#Books">Books</a>]
      
    </div>

    <!--Todo: process Response Object and its headers, schema, examples -->

    <h3 class="field-label">Example data</h3>
    <div class="example-data-content-type">Content-Type: application/json</div>
    <pre class="example"><code>[ {
  "author" : "Stephen King",
  "release" : "2018-04-30T15:38:42.853Z",
  "name" : "Marche ou crève",
  "available" : true,
  "id" : 1
}, {
  "author" : "Stephen King",
  "release" : "2018-04-30T15:38:42.853Z",
  "name" : "Marche ou crève",
  "available" : true,
  "id" : 1
} ]</code></pre>

    <h3 class="field-label">Produces</h3>
    This API call produces the following media types according to the <span class="header">Accept</span> request header;
    the media type will be conveyed by the <span class="heaader">Content-Type</span> response header.
    <ul>
      <li><code>application/json</code></li>
    </ul>

    <h3 class="field-label">Responses</h3>
    <h4 class="field-label">200</h4>
    successful operation
        
    <h4 class="field-label">404</h4>
    
        <a href="#"></a>
  </div> <!-- method -->
  <hr/>
  <div class="method"><a name="booksUpdatePut"/>
    <div class="method-path">
    <a class="up" href="#__Methods">Up</a>
    <pre class="put"><code class="huge"><span class="http-method">put</span> /books/update</code></pre></div>
    <div class="method-summary">Update an existing book (<span class="nickname">booksUpdatePut</span>)</div>
    <div class="method-notes"></div>





    <h3 class="field-label">Query parameters</h3>
    <div class="field-items">
      <div class="param">id (required)</div>

      <div class="param-desc"><span class="param-type">Query Parameter</span> &mdash;  </div><div class="param">name (optional)</div>

      <div class="param-desc"><span class="param-type">Query Parameter</span> &mdash;  </div><div class="param">author (optional)</div>

      <div class="param-desc"><span class="param-type">Query Parameter</span> &mdash;  </div><div class="param">release (optional)</div>

      <div class="param-desc"><span class="param-type">Query Parameter</span> &mdash;  </div><div class="param">available (optional)</div>

      <div class="param-desc"><span class="param-type">Query Parameter</span> &mdash;  </div>
    </div>  <!-- field-items -->


    <h3 class="field-label">Return type</h3>
    <div class="return-type">
      array[<a href="#Books">Books</a>]
      
    </div>

    <!--Todo: process Response Object and its headers, schema, examples -->

    <h3 class="field-label">Example data</h3>
    <div class="example-data-content-type">Content-Type: application/json</div>
    <pre class="example"><code>[ {
  "author" : "Stephen King",
  "release" : "2018-04-30T15:38:42.853Z",
  "name" : "Marche ou crève",
  "available" : true,
  "id" : 1
}, {
  "author" : "Stephen King",
  "release" : "2018-04-30T15:38:42.853Z",
  "name" : "Marche ou crève",
  "available" : true,
  "id" : 1
} ]</code></pre>

    <h3 class="field-label">Produces</h3>
    This API call produces the following media types according to the <span class="header">Accept</span> request header;
    the media type will be conveyed by the <span class="heaader">Content-Type</span> response header.
    <ul>
      <li><code>application/json</code></li>
    </ul>

    <h3 class="field-label">Responses</h3>
    <h4 class="field-label">200</h4>
    The book has been successfully updated
        
    <h4 class="field-label">400</h4>
    Incorrect Books.attribute
        <a href="#"></a>
    <h4 class="field-label">404</h4>
    No book found for the provided id
        <a href="#"></a>
  </div> <!-- method -->
  <hr/>

  <h2><a name="__Models">Models</a></h2>
  [ Jump to <a href="#__Methods">Methods</a> ]

  <h3>Table of Contents</h3>
  <ol>
    <li><a href="#Books"><code>Books</code> - </a></li>
  </ol>

  <div class="model">
    <h3><a name="Books"><code>Books</code> - </a> <a class="up" href="#__Models">Up</a></h3>
    <div class='model-description'></div>
    <div class="field-items">
      <div class="param">id (optional)</div><div class="param-desc"><span class="param-type"><a href="#integer">Integer</a></span> Book's id </div>
<div class="param">name (optional)</div><div class="param-desc"><span class="param-type"><a href="#string">String</a></span> Book's name </div>
<div class="param">author (optional)</div><div class="param-desc"><span class="param-type"><a href="#string">String</a></span> Book's author </div>
<div class="param">release (optional)</div><div class="param-desc"><span class="param-type"><a href="#string">String</a></span> Book's release date </div>
<div class="param">available (optional)</div><div class="param-desc"><span class="param-type"><a href="#boolean">Boolean</a></span> Wheter the book is available or not </div>
    </div>  <!-- field-items -->
  </div>
  </body>
</html>
